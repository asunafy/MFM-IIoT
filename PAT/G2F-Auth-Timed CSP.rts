#import "PAT.Lib.ClassLibrary1";   
#import "PAT.Lib.HashTable"; 

enum{app_id_value,challenge_value,origin_value,channel_id_value,challenge_value_I,challenge_value_2,k_pub_value,k_pri_value,attesttation_cert_value,counter_value};

channel ComUG_U 0;
channel ComGH_U 0;
channel ComUG_I 0;
channel ComGH_I 0;

var handle = [1, 11];//Keys have been added to the handle in the registration phase
var <HashTable> ht_U2F;
var <HashTable> ht_GWN;
var <HashTable> ht_HT;

var sig_U2F = [0, 0, 0, 0, 0]; //app_id,challenge,origin,channel_id,counter
var sig_GWN = [0, 0, 0, 0, 0]; //app_id,challenge,origin,channel_id,counter
var sig_HT = [0, 0, 0, 0, 0]; //app_id,challenge,origin,channel_id,counter

var handle_U2F = [0, 0]; //handle
var handle_GWN = [0, 0]; //handle
var handle_HT = [0, 0]; //handle

var app_id=1;
var challenge=1;
var origin=1;
var channel_id=1;
var attesttation_cert=1;
var U2FStore = [0, 0, 0, 0, 0];//app_id,challenge,origin,channel_id,k_pub
var checkappid = false;
var k_pub = 0;
var k_pri = 0;
var checksig = false;
var counter = 0;
var array = [0,2,4,7,1,3]; 
var max1 = -1; 
var tag = 0;
var test = 1;
var intrudersuccess = false;
var singelattacksuccess = false;

Initial_A() = InitialU2F{ht_U2F.Add(app_id_value,app_id);handle_U2F=handle;} ->> 
            InitialGWN{ht_GWN.Add(app_id_value,app_id);ht_GWN.Add(origin_value,origin);ht_GWN.Add(channel_id_value,channel_id);} ->>
            InitialHT{ht_HT.Add(attesttation_cert_value,attesttation_cert);} ->> 
            Skip;
            
HT_A_I() = ComGH_I?h.app.chal.orig.chan 
        ->> assign_HT_I{handle_HT=h;ht_HT.Add(app_id_value,app);ht_HT.Add(challenge_value,chal);ht_HT.Add(origin_value,orig);ht_HT.Add(channel_id_value,chan);} 
        ->> IncreaseCounter{counter++;ht_HT.Add(counter_value,counter);} 
        ->> CreateSignature{sig_U2F[0]=ht_HT.GetValue(app_id_value);sig_U2F[1]=ht_HT.GetValue(challenge_value);sig_U2F[2]=ht_HT.GetValue(origin_value);
                            sig_U2F[3]=ht_HT.GetValue(channel_id_value);sig_U2F[4]=ht_HT.GetValue(counter_value);var tmp=handle[tag];call(Sign,sig_U2F,tmp);}
        ->> ComGH_I!ht_HT.GetValue(counter_value).sig_U2F ->> Skip;

HT_A_U() =  ComGH_U?h.app.chal.orig.chan ->> assign_HT_U{handle_HT=h;ht_HT.Add(app_id_value,app);ht_HT.Add(challenge_value,chal);ht_HT.Add(origin_value,orig);ht_HT.Add(channel_id_value,chan);} 
        ->> IncreaseCounter{counter++;ht_HT.Add(counter_value,counter);} 
        ->> CreateSignature{sig_U2F[0]=ht_HT.GetValue(app_id_value);sig_U2F[1]=ht_HT.GetValue(challenge_value);sig_U2F[2]=ht_HT.GetValue(origin_value);
                            sig_U2F[3]=ht_HT.GetValue(channel_id_value);sig_U2F[4]=ht_HT.GetValue(counter_value);var tmp=handle[tag];call(Sign,sig_U2F,tmp);}
        ->> ComGH_U!ht_HT.GetValue(counter_value).sig_U2F ->> Skip;
         
HT_A(t)  = Wait[t];(HT_A_I()[]HT_A_U());
         
GWN_A_I_Multiple(t) = GWN_A_I_Single(t);GWN_A_I_Multiple(t);

GWN_A_I_Single(t) = ComUG_I?h.app.chal ->> assign_GWN_I{handle_GWN=h;ht_GWN.Add(challenge_value_I,chal);} 
                ->> CheckApp_id{if(ht_GWN.GetValue(app_id_value)==app){checkappid=true;}} ->>(GWN_A_I_sub() timeout[t] Skip);

GWN_A_I_sub() = ComGH_I!handle_GWN.ht_GWN.GetValue(app_id_value).ht_GWN.GetValue(challenge_value_I).ht_GWN.GetValue(origin_value).ht_GWN.GetValue(channel_id_value)  
          ->> ComGH_I?c.s ->> assign_GWN_I{ht_GWN.Add(counter_value,counter);sig_GWN=s;}
          ->> ComUG_I!ht_GWN.GetValue(counter_value).ht_GWN.GetValue(challenge_value_I).ht_GWN.GetValue(origin_value).ht_GWN.GetValue(channel_id_value).sig_GWN ->> Skip;
          
GWN_A_U(t) = ComUG_U?h.app.chal ->> assign_GWN_U{handle_GWN=h;ht_GWN.Add(challenge_value,chal);} ->> CheckApp_id{if(ht_GWN.GetValue(app_id_value)==app){checkappid=true;}} 
          ->>(GWN_A_U_sub() timeout[t] Skip);
          
GWN_A_U_sub() = ComGH_U!handle_GWN.ht_GWN.GetValue(app_id_value).ht_GWN.GetValue(challenge_value).ht_GWN.GetValue(origin_value).ht_GWN.GetValue(channel_id_value)
          ->> ComGH_U?c.s ->> assign_GWN_U{ht_GWN.Add(counter_value,counter);sig_GWN=s;} 
          ->> ComUG_U!ht_GWN.GetValue(counter_value).ht_GWN.GetValue(challenge_value).ht_GWN.GetValue(origin_value).ht_GWN.GetValue(channel_id_value).sig_GWN ->> Skip;

U2F_A_I_Single(t1,t2) = Wait[t1]; Random_I{challenge=call(RAND,100,0,2);ht_U2F.Add(challenge_value_I,challenge);} 
                    ->> ComUG_I!handle_U2F.ht_U2F.GetValue(app_id_value).ht_U2F.GetValue(challenge_value_I) 
                    ->> (U2F_A_I_sub() timeout[t2] Skip);

U2F_A_I_Multiple(t1,t2) = U2F_A_I_Single(t1,t2);U2F_A_I_Multiple(t1,t2);

U2F_A_I_sub() = ComUG_I?c.chal.orig.chan.s 
          ->> assign_U2F_I{U2FStore[0]=ht_U2F.GetValue(app_id_value);U2FStore[1]=chal;U2FStore[2]=orig;U2FStore[3]=chan;U2FStore[4]=c;sig_U2F=s;}
          ->> CheckSignature_I{checksig=call(CheckSigned,sig_U2F,U2FStore,handle_U2F[tag],handle_U2F[tag]);} 
          ->> CheckAttack{intrudersuccess = true;} ->> Skip;

U2F_A_U(t1,t2) = Wait[t1]; Random_U{challenge=call(RAND,100,0,1);ht_U2F.Add(challenge_value,challenge);}
         ->> ComUG_U!handle_U2F.ht_U2F.GetValue(app_id_value).ht_U2F.GetValue(challenge_value)
         ->> (U2F_A_U_sub() timeout[t2] Skip);
         
U2F_A_U_sub() = ComUG_U?c.chal.orig.chan.s
         ->> assign_U2F_U{U2FStore[0]=ht_U2F.GetValue(app_id_value);U2FStore[1]=chal;U2FStore[2]=orig;U2FStore[3]=chan;U2FStore[4]=c;sig_U2F=s;} 
         ->> CheckSignature_U{checksig=call(CheckSigned,sig_U2F,U2FStore,handle_U2F[tag],handle_U2F[tag]);} ->> Skip;                  

G2F_Auth_Single() = Initial_A();((GWN_A_I_Single(3) || U2F_A_I_Single(0,3)));

G2F_Auth_Multiple() = Initial_A();(HT_A(6) || ((GWN_A_I_Multiple(4) || U2F_A_I_Multiple(3,4))|||(GWN_A_U(12) || U2F_A_U(12,6))));

#assert G2F_Auth_Single() deadlockfree;
#assert G2F_Auth_Multiple() deadlockfree;
#define IntruderSuccess (intrudersuccess==true);
#assert G2F_Auth_Single() reaches IntruderSuccess;
#assert G2F_Auth_Multiple() reaches  IntruderSuccess;
